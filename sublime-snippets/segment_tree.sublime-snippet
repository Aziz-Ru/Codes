<snippet>
	<content><![CDATA[
class SegmentTree {
private:
    vector<int> tree;
    int n;
 
    void buildTree(vector<int>& nums, int node, int start, int end) {
        if (start == end) {
            tree[node] = nums[start];
        } else {
            int mid = (start + end) / 2;
            buildTree(nums, 2 * node, start, mid);
            buildTree(nums, 2 * node + 1, mid + 1, end);
            tree[node] = min(tree[2 * node],tree[2 * node + 1]);
        }
    }
 
public:
    // Constructor
    SegmentTree(vector<int>& nums) {
        n = nums.size();
        tree.resize(4 * n);
        buildTree(nums, 1, 0, n - 1);  
    }
    void display(){
        for(int i=8;i<=15;i++) cout<<tree[i]<<' ';
    }
 
    void update(int node, int start, int end, int idx, int val) {
        if (start == end) {
            tree[node] = val;
        } else {
            int mid = (start + end) / 2;
            if (start <= idx && idx <= mid) {
                update(2 * node, start, mid, idx, val);
            } else {
                update(2 * node + 1, mid + 1, end, idx, val);
            }
 
            tree[node] = min(tree[2 * node],tree[2 * node + 1]);
        }
    }
 
 
    int query(int node, int start, int end, int left, int right) {
        if (right < start || end < left) {
            return Max;
        }
        if (left <= start && end <= right) {
            return tree[node];
        }
        int mid = (start + end) / 2;
        int leftSum = query(2 * node, start, mid, left, right);
        int rightSum = query(2 * node + 1, mid + 1, end, left, right);
        return min(leftSum ,rightSum);
    }
 
    void update(int idx, int val) {
        update(1, 0, n - 1, idx, val);
    }
 
    int query(int left, int right) {
        return query(1, 0, n - 1, left, right);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>S_segment_tree</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	 <scope>source.c++</scope> -->
</snippet>
